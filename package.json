{
  "name": "wgl-toolchain",
  "displayName": "WGLScript toolchain",
  "description": "WGLScript formatter, linter, intellisense for VS Code",
  "version": "0.4.0",
  "publisher": "etherealhero",
  "repository": "https://github.com/etherealHero/wgl-toolchain",
  "keywords": ["wglscript", "formatter", "linter", "intellisense", "debugger"],
  "author": "Maxim Gutsan",
  "license": "MIT",
  "icon": "public/logo.jpg",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": ["Programming Languages", "Formatters", "Debuggers"],
  "activationEvents": ["onLanguage:javascript"],
  "main": "./out/extension.js",
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "build:parser": "peggy src/compiler/parser.pegjs --format es --dts",
    "build:package": "npx vsce package",
    "compile": "npm run build:parser && tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "vscode-test",
    "format": "npx @biomejs/biome check --write"
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "WGLScript",
      "properties": {
        "wglscript.intellisense.diagnostics.allowedErrorCodes": {
          "type": "array",
          "scope": "resource",
          "default": [7006],
          "markdownDescription": "Cast _error_ diagnostics as _warning_ diagnostics by list of [TypeScript Error Codes](https://typescript.tv/errors/). You can enter the code to know it, hover on the diagnostic in the document and in the pop-up prompt copy the code"
        },
        "wglscript.intellisense.diagnostics.ignoreCodes": {
          "type": "array",
          "scope": "resource",
          "default": [],
          "markdownDescription": "Ignore diagnostics codes by list of [TypeScript Error Codes](https://typescript.tv/errors/). You can enter the code to know it, hover on the diagnostic in the document and in the pop-up prompt copy the code"
        },
        "wglscript.intellisense.requestDepthStrategy.localSymbols": {
          "type": "string",
          "enum": ["bundle", "project"],
          "markdownEnumDescriptions": [
            "Search local Symbol only in bundle of current script module",
            "Search local Symbol in whole project"
          ],
          "enumItemLabels": ["Bundle scope", "Project"],
          "default": "project",
          "markdownDescription": "The request processing strategy (find all references, rename features) in the Intelligent Service for Symbol that **not defined** in the global script module"
        },
        "wglscript.intellisense.requestDepthStrategy.globalSymbols": {
          "type": "string",
          "enum": ["bundle", "project"],
          "markdownEnumDescriptions": [
            "Search global Symbol only in bundle of current script module",
            "Search global Symbol in whole project"
          ],
          "enumItemLabels": ["Bundle scope", "Project"],
          "default": "project",
          "markdownDescription": "The request processing strategy (find all references, rename features) in the Intelligent Service for Symbol that **defined** in the global script module"
        },
        "wglscript.intellisense.requestDepthStrategy.librarySymbols": {
          "type": "string",
          "enum": ["bundle", "project"],
          "markdownEnumDescriptions": [
            "Search library Symbol only in bundle of current script module",
            "Search library Symbol in whole project"
          ],
          "enumItemLabels": ["Bundle scope", "Project"],
          "default": "project",
          "markdownDescription": "The request processing strategy (find all references, rename features) in the Intelligent Service for Symbol that **defined** in d.ts files (node_modules/@types)"
        },
        "wglscript.intellisense.requestStrategy.diagnostics": {
          "type": "string",
          "enum": ["onchange", "onsave", "disabled"],
          "markdownEnumDescriptions": [
            "Calculate diagnostics **on change** text document",
            "Calculate diagnostics **on save** text document",
            "Disable diagnostics"
          ],
          "enumItemLabels": ["On Change", "On Save", "Disabled"],
          "default": "disabled",
          "markdownDescription": "The request processing strategy for diagnostics in the Intelligent Service for active text document"
        },
        "wglscript.intellisense.features.goToDefinition": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "You can [jump to the definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition) with `Ctrl+Click` or open the definition to the side with `Ctrl+Alt+Click`."
        },
        "wglscript.intellisense.features.getCompletions": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "You can [trigger IntelliSense completions items](https://code.visualstudio.com/docs/editor/intellisense?%252523038=#_intellisense-features) in any editor window by typing `Ctrl+Space` or by typing a trigger character (such as the dot character (`.`) in JavaScript)."
        },
        "wglscript.intellisense.features.getHover": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "[Hover over a JavaScript symbol](https://code.visualstudio.com/docs/languages/javascript#_hover-information) to quickly see its type information and relevant documentation. The `Ctrl+K Ctrl+I` keyboard shortcut shows this hover information at the current cursor position."
        },
        "wglscript.intellisense.features.getSignatureHelp": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "As you write JavaScript function calls, VS Code [shows information](https://code.visualstudio.com/docs/languages/javascript#_signature-help) about the function signature and highlights the parameter that you are currently completing. Signature help is shown automatically when you type a `(` or `,` within a function call. Press `Ctrl+Shift+Space` to manually trigger signature help."
        },
        "wglscript.intellisense.features.getReferences": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "We think there's nothing worse than a big context switch when all you want is to quickly check something. That's why we support peeked editors. When you execute a [Go to References](https://code.visualstudio.com/docs/editor/editingevolved#_peek) search (via `Shift+F12`)"
        },
        "wglscript.intellisense.features.renameSymbol": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "Press `F2` and then type the new desired name and press `Enter`. All usages of the symbol will be [renamed](https://code.visualstudio.com/docs/editor/editingevolved#_rename-symbol), across files."
        },
        "wglscript.intellisense.features.goToSymbol": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "You can [navigate symbols](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol) inside a file with `Ctrl+Shift+O`. By typing `:` the symbols will be grouped by category. Press `Up` or `Down` and navigate to the place you want."
        },
        "wglscript.intellisense.features.goToSymbolWorkspace": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "Support [jumping to a symbol](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) across files with `Ctrl+T`. Type the first letter of a type you want to navigate to, regardless of which file contains it, and press `Enter`."
        },
        "wglscript.intellisense.features.folding": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "You can fold regions of source code using the folding icons on the gutter between line numbers and line start. Move the mouse over the gutter and click to fold and unfold regions. Use `Shift + Click` on the folding icon to fold or unfold the region and all regions inside."
        },
        "wglscript.intellisense.features.formatter": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "Support for source code [formatting](https://code.visualstudio.com/docs/editor/codebasics#_formatting). Format Document (`Shift+Alt+F`) - Format the entire active file. You can configure formatter via [Prettier config](https://prettier.io/docs/options) file '.prettierrc' in project root path"
        },
        "wglscript.intellisense.features.codeActions": {
          "type": "string",
          "enum": ["enabled", "disabled"],
          "markdownEnumDescriptions": ["Enable feature", "Disable feature"],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "enabled",
          "markdownDescription": "Provide the user with possible corrective [actions](https://code.visualstudio.com/api/language-extensions/programmatic-language-features#possible-actions-on-errors-or-warnings) right next to an error or warning. If actions are available, a light bulb appears next to the error or warning"
        },
        "wglscript.intellisense.requestDepthStrategy.sliceModuleReferencesLength": {
          "type": "integer",
          "scope": "resource",
          "minimum": 10,
          "maximum": 5000,
          "default": 20,
          "markdownDescription": "Cut the list of modules to a specified **length** where the Symbol is mentioned for find all References in Project or rename all References in Project. If both workspace features are disabled this option has no effect. Reduce for _speed up_ processing **find all references, rename info**. **Warning** This option purposely cuts potentially useful links."
        },
        "wglscript.intellisense.buildThreads": {
          "type": "integer",
          "scope": "resource",
          "minimum": 1,
          "maximum": 1000,
          "default": 250,
          "markdownDescription": "Maximum build threads count on _initialize toolchain_"
        },
        "wglscript.intellisense.typescriptThreads": {
          "type": "integer",
          "scope": "resource",
          "minimum": 1,
          "maximum": 50,
          "default": 20,
          "markdownDescription": "Maximum TypeScript Virtual File System threads for workspace features find refs, rename Symbol. Too large a setting can lead to memory failure and service failure"
        },
        "wglscript.intellisense.exceptionBehaviour": {
          "type": "string",
          "enum": ["cleanCache", "restartExtensionHost"],
          "markdownEnumDescriptions": [
            "Clean cache (faster, unstable) on exception",
            "Restart extension host (slowlier, safer) on exception"
          ],
          "enumItemLabels": ["Enable", "Disable"],
          "default": "restartExtensionHost",
          "markdownDescription": "Behaviour on service exception"
        },
        "wglscript.globalScript.path": {
          "type": "string",
          "scope": "resource",
          "default": "Lib/AppGlobalScript.js",
          "markdownDescription": "Global script module of wglscript project"
        },
        "wglscript.nativeAddon.path": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "markdownDescription": "Path to the **native Node.js addon** (`.node` file) that provides built-in WGLScript APIs (I/O, networking etc.). If not set, default addon from the extension will be used."
        }
      }
    },
    "commands": [
      {
        "command": "wglscript.restartService",
        "title": "WGL Toolchain: Restart Service"
      },
      {
        "command": "wglscript.showBundle",
        "title": "WGL Toolchain: Show Bundle"
      },
      {
        "command": "wglscript.showLocalBundle",
        "title": "WGL Toolchain: Show Local Bundle"
      },
      {
        "command": "wglscript.showModuleInfo",
        "title": "WGL Toolchain: Show Module Info"
      },
      {
        "command": "wglscript.selectGlobalScript",
        "title": "WGL Toolchain: select global script file"
      }
    ],
    "taskDefinitions": [
      {
        "type": "wglscript",
        "required": ["command"],
        "properties": {
          "command": {
            "type": "string",
            "enum": ["build"],
            "markdownEnumDescriptions": ["Build WGLScript bundle."],
            "enumItemLabels": ["Build"]
          }
        }
      }
    ]
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@types/mocha": "^10.0.1",
    "@types/node": "^20",
    "@types/vscode": "^1.73.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^3.2.2",
    "mocha": "^10.2.0",
    "peggy": "^4.2.0",
    "typescript": "^5.7.2"
  },
  "dependencies": {
    "@typescript/vfs": "^1.6.0",
    "ignore": "^7.0.3",
    "prettier": "^3.5.2",
    "source-map": "^0.7.4"
  }
}
